CCS PCH C Compiler, Version 4.140, 22098               18-ago-14 12:06

               Filename:   D:\Projetos\Serial\master.lst

               ROM used:   864 bytes (3%)
                           Largest free fragment is 31900
               RAM used:   301 (20%) at main() level
                           306 (20%) worst case
               Stack:     3 worst case (2 in main + 1 for interrupts)

*
0000:  GOTO   024E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00FE
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   00BA
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... /* 
....................  * master.c 
....................  * 
....................  *  Created on: 18/08/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
.................... #zero_ram 
....................  
.................... #fuses HS 
.................... #use delay(clock=15MHz) 
*
0116:  MOVLW  01
0118:  MOVWF  FEA
011A:  MOVLW  2D
011C:  MOVWF  FE9
011E:  MOVF   FEF,W
0120:  BZ    013E
0122:  MOVLW  04
0124:  MOVWF  01
0126:  CLRF   00
0128:  DECFSZ 00,F
012A:  BRA    0128
012C:  DECFSZ 01,F
012E:  BRA    0126
0130:  MOVLW  DC
0132:  MOVWF  00
0134:  DECFSZ 00,F
0136:  BRA    0134
0138:  NOP   
013A:  DECFSZ FEF,F
013C:  BRA    0122
013E:  RETURN 0
.................... #use rs232(baud=9600,xmit=pin_c6,rcv=pin_c7) 
....................  
.................... //defines 
.................... #define buffer_size 256 
.................... //cmd 
.................... #define cmd_parar	0x00 
.................... #define cmd_subir	0x01 
.................... #define cmd_descer	0x02 
.................... //entradas 
.................... #define bto_sobe	PIN_B0 
.................... #define bto_desce	PIN_B1 
.................... //saidas 
.................... #define saida_sobe	PIN_C0 
.................... #define saida_desce	PIN_C1 
.................... //tempos 
.................... #define debounce 100 
....................  
.................... int buffer[buffer_size]; 
.................... int line = 0; 
.................... int lido = 0; 
.................... int add_slv = 1; 
....................  
.................... short recived = FALSE; 
.................... short en_timer2 = TRUE; 
.................... short send_stp = TRUE; 
.................... short ctrl_bto = FALSE; 
....................  
.................... typedef struct elev_struct { 
.................... 	int addr; 
.................... 	long pos; 
.................... } elev_type; 
....................  
.................... elev_type elevador[4]; 
....................  
.................... #INT_RDA 
.................... void serial_isr() { 
.................... 	clear_interrupt(INT_RDA); 
.................... 	buffer[line++] = getc(); 
*
00BA:  MOVLB  1
00BC:  MOVF   x19,W
00BE:  INCF   x19,F
00C0:  CLRF   03
00C2:  ADDLW  19
00C4:  MOVWF  FE9
00C6:  MOVLW  00
00C8:  ADDWFC 03,W
00CA:  MOVWF  FEA
00CC:  BTFSS  F9E.5
00CE:  BRA    00CC
00D0:  MOVFF  FAE,FEF
.................... 	buffer[line] = '\0'; 
00D4:  CLRF   03
00D6:  MOVF   x19,W
00D8:  ADDLW  19
00DA:  MOVWF  FE9
00DC:  MOVLW  00
00DE:  ADDWFC 03,W
00E0:  MOVWF  FEA
00E2:  CLRF   FEF
.................... 	set_timer2(0); 
00E4:  CLRF   FCC
.................... 	if (en_timer2) { 
00E6:  BTFSS  x1C.1
00E8:  BRA    00F6
.................... 		en_timer2 = FALSE; 
00EA:  BCF    x1C.1
.................... 		setup_timer_2(T2_DIV_BY_16, 255, 1); 
00EC:  MOVLW  00
00EE:  IORLW  06
00F0:  MOVWF  FCA
00F2:  MOVLW  FF
00F4:  MOVWF  FCB
.................... 	} 
.................... } 
....................  
00F6:  BCF    F9E.5
00F8:  MOVLB  0
00FA:  GOTO   006C
.................... #INT_TIMER2 
.................... void timer2_isr() { 
.................... 	clear_interrupt(INT_TIMER2); 
00FE:  BCF    F9E.1
.................... 	setup_timer_2(T2_DISABLED, 255, 1); 
0100:  MOVLW  00
0102:  MOVWF  FCA
0104:  MOVLW  FF
0106:  MOVWF  FCB
.................... 	set_timer2(0); 
0108:  CLRF   FCC
.................... 	recived = TRUE; 
010A:  MOVLB  1
010C:  BSF    x1C.0
.................... } 
....................  
010E:  BCF    F9E.1
0110:  MOVLB  0
0112:  GOTO   006C
.................... int trata_bto() { 
*
0140:  BSF    F93.0
0142:  MOVLB  1
0144:  BCF    x2B.0
0146:  BTFSS  F81.0
0148:  BSF    x2B.0
014A:  BSF    F93.1
014C:  BCF    x2B.1
014E:  BTFSS  F81.1
0150:  BSF    x2B.1
0152:  SETF   x2C
.................... 	short sobe = !input(bto_sobe); 
.................... 	short desce = !input(bto_desce); 
.................... 	int ret = 0xFF; 
....................  
.................... 	if (sobe ^ desce) { 
0154:  MOVLW  00
0156:  BTFSC  x2B.0
0158:  MOVLW  01
015A:  MOVWF  x2E
015C:  MOVLW  00
015E:  BTFSC  x2B.1
0160:  MOVLW  01
0162:  XORWF  x2E,W
0164:  BZ    018E
.................... 		delay_ms(debounce); 
0166:  MOVLW  64
0168:  MOVWF  x2D
016A:  MOVLB  0
016C:  RCALL  0116
.................... 		if (!input(bto_sobe)) 
016E:  BSF    F93.0
0170:  BTFSC  F81.0
0172:  BRA    017C
.................... 			ret = bto_sobe; 
0174:  MOVLW  08
0176:  MOVLB  1
0178:  MOVWF  x2C
017A:  MOVLB  0
.................... 		if (!input(bto_desce)) 
017C:  BSF    F93.1
017E:  BTFSC  F81.1
0180:  BRA    0188
.................... 			ret = bto_desce; 
0182:  MOVLW  09
0184:  MOVLB  1
0186:  MOVWF  x2C
.................... 		ctrl_bto = TRUE; 
0188:  MOVLB  1
018A:  BSF    x1C.3
.................... 	} else if (!send_stp && ctrl_bto) { 
018C:  BRA    019A
018E:  BTFSC  x1C.2
0190:  BRA    019A
0192:  BTFSS  x1C.3
0194:  BRA    019A
.................... 		ctrl_bto = FALSE; 
0196:  BCF    x1C.3
.................... 		send_stp = TRUE; 
0198:  BSF    x1C.2
.................... 	} 
....................  
.................... 	return ret; 
019A:  MOVFF  12C,01
.................... } 
019E:  MOVLB  0
01A0:  GOTO   02E8 (RETURN)
....................  
.................... int main(void) { 
*
024E:  CLRF   FF8
0250:  BCF    FD0.7
0252:  BSF    07.7
0254:  MOVLW  FE
0256:  MOVWF  00
0258:  MOVLW  06
025A:  MOVWF  01
025C:  MOVLW  02
025E:  MOVWF  FE9
0260:  MOVLW  00
0262:  MOVWF  FEA
0264:  CLRF   FEE
0266:  DECFSZ 00,F
0268:  BRA    0264
026A:  DECFSZ 01,F
026C:  BRA    0264
026E:  CLRF   FEA
0270:  CLRF   FE9
0272:  MOVLW  61
0274:  MOVWF  FAF
0276:  MOVLW  A6
0278:  MOVWF  FAC
027A:  MOVLW  90
027C:  MOVWF  FAB
027E:  MOVLB  1
0280:  CLRF   x19
0282:  CLRF   x1A
0284:  MOVLW  01
0286:  MOVWF  x1B
0288:  BCF    x1C.0
028A:  BSF    x1C.1
028C:  BSF    x1C.2
028E:  BCF    x1C.3
0290:  BSF    FC1.0
0292:  BSF    FC1.1
0294:  BSF    FC1.2
0296:  BCF    FC1.3
....................  
.................... 	clear_interrupt(INT_TIMER2); 
0298:  BCF    F9E.1
.................... 	set_timer2(0); 
029A:  CLRF   FCC
.................... 	setup_timer_2(T2_DISABLED, 255, 1); 
029C:  MOVLW  00
029E:  MOVWF  FCA
02A0:  MOVLW  FF
02A2:  MOVWF  FCB
....................  
.................... 	clear_interrupt(INT_RDA); 
.................... 	enable_interrupts(INT_RDA); 
02A4:  BSF    F9D.5
.................... 	enable_interrupts(INT_TIMER2); 
02A6:  BSF    F9D.1
.................... 	enable_interrupts(GLOBAL); 
02A8:  MOVLW  C0
02AA:  IORWF  FF2,F
....................  
.................... 	while (TRUE) { 
.................... 		if (recived) { 
02AC:  BTFSS  x1C.0
02AE:  BRA    02E4
.................... 			recived = FALSE; 
02B0:  BCF    x1C.0
.................... 			int addr = buffer[0] - 48; 
.................... 			int pos = buffer[1] - 48; 
02B2:  MOVLW  30
02B4:  SUBWF  19,W
02B6:  MOVWF  x29
02B8:  MOVLW  30
02BA:  SUBWF  1A,W
02BC:  MOVWF  x2A
.................... 			elevador[addr].addr = addr; 
02BE:  MOVF   x29,W
02C0:  MULLW  03
02C2:  MOVF   FF3,W
02C4:  CLRF   x2C
02C6:  MOVWF  x2B
02C8:  MOVLW  1D
02CA:  ADDWF  x2B,W
02CC:  MOVWF  FE9
02CE:  MOVLW  01
02D0:  ADDWFC x2C,W
02D2:  MOVWF  FEA
02D4:  MOVFF  129,FEF
.................... 			elevador[0].pos = pos; 
02D8:  CLRF   x1F
02DA:  MOVFF  12A,11E
.................... 			buffer[0] = '\0'; 
02DE:  CLRF   19
.................... 			line = 0; 
02E0:  CLRF   x19
.................... 			en_timer2 = TRUE; 
02E2:  BSF    x1C.1
.................... 		} 
....................  
.................... 		switch (trata_bto()) { 
02E4:  MOVLB  0
02E6:  BRA    0140
02E8:  MOVF   01,W
02EA:  XORLW  08
02EC:  BZ    02F4
02EE:  XORLW  01
02F0:  BZ    0312
02F2:  BRA    0330
.................... 		case bto_sobe: 
.................... 			printf("%u%u", add_slv, cmd_subir); 
02F4:  MOVFF  11B,12B
02F8:  MOVLW  1B
02FA:  MOVLB  1
02FC:  MOVWF  x2C
02FE:  MOVLB  0
0300:  RCALL  01D0
0302:  MOVLW  01
0304:  MOVLB  1
0306:  MOVWF  x2B
0308:  MOVLW  1B
030A:  MOVWF  x2C
030C:  MOVLB  0
030E:  RCALL  01D0
.................... 			break; 
0310:  BRA    0350
.................... 		case bto_desce: 
.................... 			printf("%u%u", add_slv, cmd_descer); 
0312:  MOVFF  11B,12B
0316:  MOVLW  1B
0318:  MOVLB  1
031A:  MOVWF  x2C
031C:  MOVLB  0
031E:  RCALL  01D0
0320:  MOVLW  02
0322:  MOVLB  1
0324:  MOVWF  x2B
0326:  MOVLW  1B
0328:  MOVWF  x2C
032A:  MOVLB  0
032C:  RCALL  01D0
.................... 			break; 
032E:  BRA    0350
.................... 		default: 
.................... 			if (send_stp) { 
0330:  MOVLB  1
0332:  BTFSS  x1C.2
0334:  BRA    0352
.................... 				send_stp = FALSE; 
0336:  BCF    x1C.2
.................... 				printf("%u%u", add_slv, cmd_parar); 
0338:  MOVFF  11B,12B
033C:  MOVLW  1B
033E:  MOVWF  x2C
0340:  MOVLB  0
0342:  RCALL  01D0
0344:  MOVLB  1
0346:  CLRF   x2B
0348:  MOVLW  1B
034A:  MOVWF  x2C
034C:  MOVLB  0
034E:  RCALL  01D0
0350:  MOVLB  1
.................... 			} 
.................... 		} 
.................... 		delay_ms(100); 
0352:  MOVLW  64
0354:  MOVWF  x2D
0356:  MOVLB  0
0358:  RCALL  0116
.................... 	} 
035A:  MOVLB  1
035C:  BRA    02AC
....................  
.................... 	return 0; 
035E:  MOVLW  00
0360:  MOVWF  01
.................... } 
0362:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
