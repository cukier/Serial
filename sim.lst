CCS PCM C Compiler, Version 4.140, 22098               15-set-14 09:46

               Filename:   D:\Projetos\Serial\sim.lst

               ROM used:   252 words (12%)
                           Largest free fragment is 1796
               RAM used:   19 (8%) at main() level
                           21 (9%) worst case
               Stack:     2 worst case (1 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0D3
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.0
001D:  GOTO   020
001E:  BTFSC  0C.0
001F:  GOTO   054
0020:  BTFSS  0B.5
0021:  GOTO   024
0022:  BTFSC  0B.2
0023:  GOTO   041
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... /* 
....................  * sim.c 
....................  * 
....................  *  Created on: 10/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #fuses HS 
....................  
.................... #use delay(clock=16MHz) 
.................... #use rs232(xmit=PIN_B2, baud=9600) 
*
0067:  BSF    03.5
0068:  BCF    06.2
0069:  BCF    03.5
006A:  BCF    06.2
006B:  MOVLW  08
006C:  MOVWF  78
006D:  GOTO   06E
006E:  NOP
006F:  BSF    78.7
0070:  GOTO   07F
0071:  BCF    78.7
0072:  RRF    2E,F
0073:  BTFSC  03.0
0074:  BSF    06.2
0075:  BTFSS  03.0
0076:  BCF    06.2
0077:  BSF    78.6
0078:  GOTO   07F
0079:  BCF    78.6
007A:  DECFSZ 78,F
007B:  GOTO   072
007C:  GOTO   07D
007D:  NOP
007E:  BSF    06.2
007F:  MOVLW  84
0080:  MOVWF  04
0081:  DECFSZ 04,F
0082:  GOTO   081
0083:  GOTO   084
0084:  NOP
0085:  BTFSC  78.7
0086:  GOTO   071
0087:  BTFSC  78.6
0088:  GOTO   079
0089:  GOTO   0F3 (RETURN)
....................  
.................... #define cms_mstr	PIN_A0 
.................... #define cmd_mstr	PIN_A1 
.................... #define cms_slv		PIN_A2 
.................... #define cmd_slv		PIN_A3 
....................  
.................... #define pos_mstr	PIN_B0 
.................... #define pos_slv		PIN_B1 
....................  
.................... short ctrlMstr; 
.................... short ctrlSlv; 
.................... short mstr_sobe; 
.................... short slv_sobe; 
....................  
.................... signed long fuso_mstr; 
.................... signed long fuso_slv; 
....................  
.................... #INT_TIMER0 
.................... void isr_tmr0() { 
.................... 	clear_interrupt(INT_TIMER0); 
*
0041:  BCF    0B.2
.................... 	if (mstr_sobe) 
0042:  BTFSS  28.2
0043:  GOTO   048
.................... 		fuso_mstr++; 
0044:  INCF   29,F
0045:  BTFSC  03.2
0046:  INCF   2A,F
.................... 	else 
0047:  GOTO   04C
.................... 		fuso_mstr--; 
0048:  MOVF   29,W
0049:  BTFSC  03.2
004A:  DECF   2A,F
004B:  DECF   29,F
.................... 	output_toggle(pos_mstr); 
004C:  BSF    03.5
004D:  BCF    06.0
004E:  MOVLW  01
004F:  BCF    03.5
0050:  XORWF  06,F
.................... } 
....................  
0051:  BCF    0B.2
0052:  BCF    0A.3
0053:  GOTO   024
.................... #INT_TIMER1 
.................... void isr_tmr1() { 
.................... 	clear_interrupt(INT_TIMER1); 
0054:  BCF    0C.0
.................... 	if (slv_sobe) 
0055:  BTFSS  28.3
0056:  GOTO   05B
.................... 		fuso_slv++; 
0057:  INCF   2B,F
0058:  BTFSC  03.2
0059:  INCF   2C,F
.................... 	else 
005A:  GOTO   05F
.................... 		fuso_slv--; 
005B:  MOVF   2B,W
005C:  BTFSC  03.2
005D:  DECF   2C,F
005E:  DECF   2B,F
.................... 	output_toggle(pos_slv); 
005F:  BSF    03.5
0060:  BCF    06.1
0061:  MOVLW  02
0062:  BCF    03.5
0063:  XORWF  06,F
.................... } 
....................  
0064:  BCF    0C.0
0065:  BCF    0A.3
0066:  GOTO   024
.................... void trata_bto() { 
*
008A:  BSF    03.5
008B:  BSF    05.0
008C:  BCF    03.5
008D:  BCF    2D.0
008E:  BTFSS  05.0
008F:  BSF    2D.0
0090:  BSF    03.5
0091:  BSF    05.1
0092:  BCF    03.5
0093:  BCF    2D.1
0094:  BTFSS  05.1
0095:  BSF    2D.1
0096:  BSF    03.5
0097:  BSF    05.2
0098:  BCF    03.5
0099:  BCF    2D.2
009A:  BTFSS  05.2
009B:  BSF    2D.2
009C:  BSF    03.5
009D:  BSF    05.3
009E:  BCF    03.5
009F:  BCF    2D.3
00A0:  BTFSS  05.3
00A1:  BSF    2D.3
.................... 	short a = !input(cms_mstr); 
.................... 	short b = !input(cmd_mstr); 
.................... 	short c = !input(cms_slv); 
.................... 	short d = !input(cmd_slv); 
....................  
.................... 	if (a ^ b) { 
00A2:  MOVLW  00
00A3:  BTFSC  2D.0
00A4:  MOVLW  01
00A5:  MOVWF  2F
00A6:  MOVLW  00
00A7:  BTFSC  2D.1
00A8:  MOVLW  01
00A9:  XORWF  2F,W
00AA:  BTFSC  03.2
00AB:  GOTO   0B4
.................... 		if (ctrlMstr) { 
00AC:  BTFSS  28.0
00AD:  GOTO   0B3
.................... 			ctrlMstr = FALSE; 
00AE:  BCF    28.0
.................... 			mstr_sobe = a; 
00AF:  BCF    28.2
00B0:  BTFSC  2D.0
00B1:  BSF    28.2
.................... 			enable_interrupts(INT_TIMER0); 
00B2:  BSF    0B.5
.................... 		} 
.................... 	} else if (!ctrlMstr) { 
00B3:  GOTO   0B8
00B4:  BTFSC  28.0
00B5:  GOTO   0B8
.................... 		ctrlMstr = TRUE; 
00B6:  BSF    28.0
.................... 		disable_interrupts(INT_TIMER0); 
00B7:  BCF    0B.5
.................... 	} 
....................  
.................... 	if (c ^ d) { 
00B8:  MOVLW  00
00B9:  BTFSC  2D.2
00BA:  MOVLW  01
00BB:  MOVWF  2F
00BC:  MOVLW  00
00BD:  BTFSC  2D.3
00BE:  MOVLW  01
00BF:  XORWF  2F,W
00C0:  BTFSC  03.2
00C1:  GOTO   0CC
.................... 		if (ctrlSlv) { 
00C2:  BTFSS  28.1
00C3:  GOTO   0CB
.................... 			ctrlSlv = FALSE; 
00C4:  BCF    28.1
.................... 			slv_sobe = c; 
00C5:  BCF    28.3
00C6:  BTFSC  2D.2
00C7:  BSF    28.3
.................... 			enable_interrupts(INT_TIMER1); 
00C8:  BSF    03.5
00C9:  BSF    0C.0
00CA:  BCF    03.5
.................... 		} 
.................... 	} else if (!ctrlSlv) { 
00CB:  GOTO   0D2
00CC:  BTFSC  28.1
00CD:  GOTO   0D2
.................... 		ctrlSlv = TRUE; 
00CE:  BSF    28.1
.................... 		disable_interrupts(INT_TIMER1); 
00CF:  BSF    03.5
00D0:  BCF    0C.0
00D1:  BCF    03.5
.................... 	} 
.................... } 
00D2:  GOTO   0F8 (RETURN)
....................  
.................... int main(void) { 
00D3:  CLRF   04
00D4:  BCF    03.7
00D5:  MOVLW  1F
00D6:  ANDWF  03,F
00D7:  BSF    03.5
00D8:  BCF    06.2
00D9:  BCF    03.5
00DA:  BSF    06.2
00DB:  MOVLW  07
00DC:  MOVWF  1F
....................  
.................... 	set_timer0(0); 
00DD:  CLRF   01
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_256); 
00DE:  BSF    03.5
00DF:  MOVF   01,W
00E0:  ANDLW  C0
00E1:  IORLW  07
00E2:  MOVWF  01
....................  
.................... 	set_timer1(0); 
00E3:  BCF    03.5
00E4:  CLRF   0F
00E5:  CLRF   0E
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_2); 
00E6:  MOVLW  95
00E7:  MOVWF  10
....................  
.................... 	clear_interrupt(INT_TIMER0); 
00E8:  BCF    0B.2
.................... 	clear_interrupt(INT_TIMER1); 
00E9:  BCF    0C.0
.................... 	enable_interrupts(GLOBAL); 
00EA:  MOVLW  C0
00EB:  IORWF  0B,F
....................  
.................... 	printf("Hello\n\r"); 
00EC:  CLRF   2D
00ED:  MOVF   2D,W
00EE:  CALL   035
00EF:  INCF   2D,F
00F0:  MOVWF  77
00F1:  MOVWF  2E
00F2:  GOTO   067
00F3:  MOVLW  07
00F4:  SUBWF  2D,W
00F5:  BTFSS  03.2
00F6:  GOTO   0ED
....................  
.................... 	while (TRUE) { 
.................... 		trata_bto(); 
00F7:  GOTO   08A
.................... 	} 
00F8:  GOTO   0F7
....................  
.................... 	return 0; 
00F9:  MOVLW  00
00FA:  MOVWF  78
.................... } 
00FB:  SLEEP

Configuration Fuses:
   Word  1: 3F62   NOWDT PUT HS MCLR BROWNOUT NOLVP NOCPD NOPROTECT
