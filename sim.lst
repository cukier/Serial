CCS PCM C Compiler, Version 4.140, 22098               15-set-14 16:00

               Filename:   D:\Projetos\Serial\sim.lst

               ROM used:   194 words (9%)
                           Largest free fragment is 1854
               RAM used:   18 (8%) at main() level
                           21 (9%) worst case
               Stack:     2 worst case (1 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0A4
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.0
001D:  GOTO   020
001E:  BTFSC  0C.0
001F:  GOTO   048
0020:  BTFSS  0B.5
0021:  GOTO   024
0022:  BTFSC  0B.2
0023:  GOTO   035
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... /* 
....................  * sim.c 
....................  * 
....................  *  Created on: 10/09/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #fuses HS 
....................  
.................... #use delay(clock=16MHz) 
.................... #use rs232(xmit=PIN_B2, baud=9600) 
....................  
.................... #define cms_mstr	PIN_A0 
.................... #define cmd_mstr	PIN_A1 
.................... #define cms_slv		PIN_A2 
.................... #define cmd_slv		PIN_A3 
....................  
.................... #define pos_mstr	PIN_B0 
.................... #define pos_slv		PIN_B1 
....................  
.................... short ctrlMstr; 
.................... short ctrlSlv; 
.................... short mstr_sobe; 
.................... short slv_sobe; 
....................  
.................... signed long fuso_mstr; 
.................... signed long fuso_slv; 
....................  
.................... #INT_TIMER0 
.................... void isr_tmr0() { 
.................... 	clear_interrupt(INT_TIMER0); 
0035:  BCF    0B.2
.................... 	if (mstr_sobe) 
0036:  BTFSS  28.2
0037:  GOTO   03C
.................... 		fuso_mstr++; 
0038:  INCF   29,F
0039:  BTFSC  03.2
003A:  INCF   2A,F
.................... 	else 
003B:  GOTO   040
.................... 		fuso_mstr--; 
003C:  MOVF   29,W
003D:  BTFSC  03.2
003E:  DECF   2A,F
003F:  DECF   29,F
.................... 	output_toggle(pos_mstr); 
0040:  BSF    03.5
0041:  BCF    06.0
0042:  MOVLW  01
0043:  BCF    03.5
0044:  XORWF  06,F
.................... } 
....................  
0045:  BCF    0B.2
0046:  BCF    0A.3
0047:  GOTO   024
.................... #INT_TIMER1 
.................... void isr_tmr1() { 
.................... 	clear_interrupt(INT_TIMER1); 
0048:  BCF    0C.0
.................... 	if (slv_sobe) 
0049:  BTFSS  28.3
004A:  GOTO   04F
.................... 		fuso_slv++; 
004B:  INCF   2B,F
004C:  BTFSC  03.2
004D:  INCF   2C,F
.................... 	else 
004E:  GOTO   053
.................... 		fuso_slv--; 
004F:  MOVF   2B,W
0050:  BTFSC  03.2
0051:  DECF   2C,F
0052:  DECF   2B,F
.................... 	output_toggle(pos_slv); 
0053:  BSF    03.5
0054:  BCF    06.1
0055:  MOVLW  02
0056:  BCF    03.5
0057:  XORWF  06,F
.................... } 
....................  
0058:  BCF    0C.0
0059:  BCF    0A.3
005A:  GOTO   024
.................... void trata_bto() { 
005B:  BSF    03.5
005C:  BSF    05.0
005D:  BCF    03.5
005E:  BCF    2D.0
005F:  BTFSS  05.0
0060:  BSF    2D.0
0061:  BSF    03.5
0062:  BSF    05.1
0063:  BCF    03.5
0064:  BCF    2D.1
0065:  BTFSS  05.1
0066:  BSF    2D.1
0067:  BSF    03.5
0068:  BSF    05.2
0069:  BCF    03.5
006A:  BCF    2D.2
006B:  BTFSS  05.2
006C:  BSF    2D.2
006D:  BSF    03.5
006E:  BSF    05.3
006F:  BCF    03.5
0070:  BCF    2D.3
0071:  BTFSS  05.3
0072:  BSF    2D.3
.................... 	short a = !input(cms_mstr); 
.................... 	short b = !input(cmd_mstr); 
.................... 	short c = !input(cms_slv); 
.................... 	short d = !input(cmd_slv); 
....................  
.................... 	if (a ^ b) { 
0073:  MOVLW  00
0074:  BTFSC  2D.0
0075:  MOVLW  01
0076:  MOVWF  2F
0077:  MOVLW  00
0078:  BTFSC  2D.1
0079:  MOVLW  01
007A:  XORWF  2F,W
007B:  BTFSC  03.2
007C:  GOTO   085
.................... 		if (ctrlMstr) { 
007D:  BTFSS  28.0
007E:  GOTO   084
.................... 			ctrlMstr = FALSE; 
007F:  BCF    28.0
.................... 			mstr_sobe = a; 
0080:  BCF    28.2
0081:  BTFSC  2D.0
0082:  BSF    28.2
.................... 			enable_interrupts(INT_TIMER0); 
0083:  BSF    0B.5
.................... 		} 
.................... 	} else if (!ctrlMstr) { 
0084:  GOTO   089
0085:  BTFSC  28.0
0086:  GOTO   089
.................... 		ctrlMstr = TRUE; 
0087:  BSF    28.0
.................... 		disable_interrupts(INT_TIMER0); 
0088:  BCF    0B.5
.................... 	} 
....................  
.................... 	if (c ^ d) { 
0089:  MOVLW  00
008A:  BTFSC  2D.2
008B:  MOVLW  01
008C:  MOVWF  2F
008D:  MOVLW  00
008E:  BTFSC  2D.3
008F:  MOVLW  01
0090:  XORWF  2F,W
0091:  BTFSC  03.2
0092:  GOTO   09D
.................... 		if (ctrlSlv) { 
0093:  BTFSS  28.1
0094:  GOTO   09C
.................... 			ctrlSlv = FALSE; 
0095:  BCF    28.1
.................... 			slv_sobe = c; 
0096:  BCF    28.3
0097:  BTFSC  2D.2
0098:  BSF    28.3
.................... 			enable_interrupts(INT_TIMER1); 
0099:  BSF    03.5
009A:  BSF    0C.0
009B:  BCF    03.5
.................... 		} 
.................... 	} else if (!ctrlSlv) { 
009C:  GOTO   0A3
009D:  BTFSC  28.1
009E:  GOTO   0A3
.................... 		ctrlSlv = TRUE; 
009F:  BSF    28.1
.................... 		disable_interrupts(INT_TIMER1); 
00A0:  BSF    03.5
00A1:  BCF    0C.0
00A2:  BCF    03.5
.................... 	} 
.................... } 
00A3:  GOTO   0BE (RETURN)
....................  
.................... int main(void) { 
00A4:  CLRF   04
00A5:  BCF    03.7
00A6:  MOVLW  1F
00A7:  ANDWF  03,F
00A8:  BSF    03.5
00A9:  BCF    06.2
00AA:  BCF    03.5
00AB:  BSF    06.2
00AC:  MOVLW  07
00AD:  MOVWF  1F
....................  
.................... 	set_timer0(0); 
00AE:  CLRF   01
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_256); 
00AF:  BSF    03.5
00B0:  MOVF   01,W
00B1:  ANDLW  C0
00B2:  IORLW  07
00B3:  MOVWF  01
....................  
.................... 	set_timer1(0); 
00B4:  BCF    03.5
00B5:  CLRF   0F
00B6:  CLRF   0E
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_2); 
00B7:  MOVLW  95
00B8:  MOVWF  10
....................  
.................... 	clear_interrupt(INT_TIMER0); 
00B9:  BCF    0B.2
.................... 	clear_interrupt(INT_TIMER1); 
00BA:  BCF    0C.0
.................... 	enable_interrupts(GLOBAL); 
00BB:  MOVLW  C0
00BC:  IORWF  0B,F
....................  
.................... 	while (TRUE) { 
.................... 		trata_bto(); 
00BD:  GOTO   05B
.................... 	} 
00BE:  GOTO   0BD
....................  
.................... 	return 0; 
00BF:  MOVLW  00
00C0:  MOVWF  78
.................... } 
00C1:  SLEEP

Configuration Fuses:
   Word  1: 3F62   NOWDT PUT HS MCLR BROWNOUT NOLVP NOCPD NOPROTECT
