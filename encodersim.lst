CCS PCH C Compiler, Version 4.140, 22098               18-ago-14 15:54

               Filename:   D:\Projetos\Serial\encodersim.lst

               ROM used:   576 bytes (2%)
                           Largest free fragment is 32188
               RAM used:   29 (2%) at main() level
                           32 (2%) worst case
               Stack:     4 worst case (2 in main + 2 for interrupts)

*
0000:  GOTO   01FC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* 
....................  * encodersim.c 
....................  * 
....................  *  Created on: 15/08/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
....................  
.................... #fuses HS 
....................  
.................... #use delay(clock=16MHz) 
0172:  CLRF   FEA
0174:  MOVLW  1E
0176:  MOVWF  FE9
0178:  MOVF   FEF,W
017A:  BZ    0198
017C:  MOVLW  05
017E:  MOVWF  01
0180:  CLRF   00
0182:  DECFSZ 00,F
0184:  BRA    0182
0186:  DECFSZ 01,F
0188:  BRA    0180
018A:  MOVLW  2E
018C:  MOVWF  00
018E:  DECFSZ 00,F
0190:  BRA    018E
0192:  BRA    0194
0194:  DECFSZ FEF,F
0196:  BRA    017C
0198:  RETURN 0
.................... //#use rs232(xmit=PIN_C6, baud=9600) 
....................  
.................... //saidas 
.................... #define canal_a PIN_C7 
.................... #define canal_b PIN_C6 
.................... #define canal_z PIN_C5 
.................... //entradas 
.................... #define av PIN_B0 
.................... #define rv PIN_B1 
.................... //timers 
.................... #define tmr0_reg 59755 
.................... #define debouce 100 
.................... //estados de saida do encoder 
.................... #define estado_a 0 
.................... #define estado_b 1 
.................... #define estado_c 2 
.................... #define estado_d 3 
.................... //resolucao do encoder 
.................... #define resolucao 512 
....................  
.................... short ctrl = FALSE; 
.................... short emAvanco = FALSE; 
.................... short ligaTimer = FALSE; 
.................... int estado = 0; 
.................... signed long cont = 0; 
....................  
.................... #INT_TIMER0 
.................... void isr_timer0() { 
....................  
.................... 	clear_interrupt(INT_TIMER0); 
*
00AE:  BCF    FF2.2
.................... 	set_timer0(tmr0_reg); 
00B0:  MOVLW  E9
00B2:  MOVWF  FD7
00B4:  MOVLW  6B
00B6:  MOVWF  FD6
....................  
.................... 	if (emAvanco) 
00B8:  BTFSS  19.1
00BA:  BRA    00C0
.................... 		++estado; 
00BC:  INCF   1A,F
.................... 	else 
00BE:  BRA    00C2
.................... 		--estado; 
00C0:  DECF   1A,F
....................  
.................... 	if (estado == estado_d + 1) 
00C2:  MOVF   1A,W
00C4:  SUBLW  04
00C6:  BNZ   00CC
.................... 		estado = estado_a; 
00C8:  CLRF   1A
.................... 	else if (estado == 0xFF) 
00CA:  BRA    00D4
00CC:  INCFSZ 1A,W
00CE:  BRA    00D4
.................... 		estado = estado_d; 
00D0:  MOVLW  03
00D2:  MOVWF  1A
....................  
.................... 	switch (estado) { 
00D4:  MOVF   1A,W
00D6:  ADDLW  FC
00D8:  BC    0136
00DA:  ADDLW  04
00DC:  GOTO   0150
.................... 	case estado_a: 
.................... 		output_high(canal_a); 
00E0:  BCF    F94.7
00E2:  BSF    F8B.7
.................... 		output_high(canal_b); 
00E4:  BCF    F94.6
00E6:  BSF    F8B.6
.................... 		if (emAvanco) 
00E8:  BTFSS  19.1
00EA:  BRA    00F2
.................... 			++cont; 
00EC:  INCF   1B,F
00EE:  BTFSC  FD8.2
00F0:  INCF   1C,F
.................... 		if (cont >= resolucao) 
00F2:  BTFSC  1C.7
00F4:  BRA    0100
00F6:  MOVF   1C,W
00F8:  SUBLW  01
00FA:  BC    0100
.................... 			cont = 0; 
00FC:  CLRF   1C
00FE:  CLRF   1B
.................... 		break; 
0100:  BRA    0136
.................... 	case estado_b: 
.................... 		output_high(canal_a); 
0102:  BCF    F94.7
0104:  BSF    F8B.7
.................... 		output_low(canal_b); 
0106:  BCF    F94.6
0108:  BCF    F8B.6
.................... 		break; 
010A:  BRA    0136
.................... 	case estado_c: 
.................... 		output_low(canal_a); 
010C:  BCF    F94.7
010E:  BCF    F8B.7
.................... 		output_low(canal_b); 
0110:  BCF    F94.6
0112:  BCF    F8B.6
.................... 		break; 
0114:  BRA    0136
.................... 	case estado_d: 
.................... 		output_low(canal_a); 
0116:  BCF    F94.7
0118:  BCF    F8B.7
.................... 		output_high(canal_b); 
011A:  BCF    F94.6
011C:  BSF    F8B.6
.................... 		if (!emAvanco) 
011E:  BTFSC  19.1
0120:  BRA    012A
.................... 			--cont; 
0122:  MOVF   1B,W
0124:  BTFSC  FD8.2
0126:  DECF   1C,F
0128:  DECF   1B,F
.................... 		if (cont < 0) 
012A:  BTFSC  1C.7
012C:  BRA    0130
012E:  BRA    0136
.................... 			cont = resolucao - 1; 
0130:  MOVLW  01
0132:  MOVWF  1C
0134:  SETF   1B
.................... 		break; 
.................... 	} 
....................  
.................... 	if (estado == estado_a && !cont) 
0136:  MOVF   1A,F
0138:  BNZ   0146
013A:  MOVF   1B,W
013C:  IORWF  1C,W
013E:  BNZ   0146
.................... 		output_high(canal_z); 
0140:  BCF    F94.5
0142:  BSF    F8B.5
.................... 	else 
0144:  BRA    014A
.................... 		output_low(canal_z); 
0146:  BCF    F94.5
0148:  BCF    F8B.5
.................... } 
....................  
014A:  BCF    FF2.2
014C:  GOTO   0060
.................... void check_bto() { 
*
019A:  BSF    F93.0
019C:  BCF    1D.0
019E:  BTFSS  F81.0
01A0:  BSF    1D.0
01A2:  BSF    F93.1
01A4:  BCF    1D.1
01A6:  BTFSS  F81.1
01A8:  BSF    1D.1
....................  
.................... 	short i_av = !input(av); 
.................... 	short i_rv = !input(rv); 
....................  
.................... 	if (i_av ^ i_rv) { 
01AA:  MOVLW  00
01AC:  BTFSC  1D.0
01AE:  MOVLW  01
01B0:  MOVWF  1F
01B2:  MOVLW  00
01B4:  BTFSC  1D.1
01B6:  MOVLW  01
01B8:  XORWF  1F,W
01BA:  BZ    01F0
.................... 		if (i_av) { 
01BC:  BTFSS  1D.0
01BE:  BRA    01CC
.................... 			delay_ms(debouce); 
01C0:  MOVLW  64
01C2:  MOVWF  1E
01C4:  RCALL  0172
.................... 			if (i_av) 
01C6:  BTFSS  1D.0
01C8:  BRA    01CC
.................... 				emAvanco = TRUE; 
01CA:  BSF    19.1
.................... 		} 
.................... 		if (i_rv) { 
01CC:  BTFSS  1D.1
01CE:  BRA    01DC
.................... 			delay_ms(debouce); 
01D0:  MOVLW  64
01D2:  MOVWF  1E
01D4:  RCALL  0172
.................... 			if (i_rv) 
01D6:  BTFSS  1D.1
01D8:  BRA    01DC
.................... 				emAvanco = FALSE; 
01DA:  BCF    19.1
.................... 		} 
.................... 		if (ligaTimer) { 
01DC:  BTFSS  19.2
01DE:  BRA    01EE
.................... 			ligaTimer = FALSE; 
01E0:  BCF    19.2
.................... 			set_timer0(tmr0_reg); 
01E2:  MOVLW  E9
01E4:  MOVWF  FD7
01E6:  MOVLW  6B
01E8:  MOVWF  FD6
.................... 			setup_timer_0(T0_INTERNAL | T0_DIV_1); 
01EA:  MOVLW  88
01EC:  MOVWF  FD5
.................... 		} 
.................... 	} else if (!ligaTimer) { 
01EE:  BRA    01F8
01F0:  BTFSC  19.2
01F2:  BRA    01F8
.................... 		ligaTimer = TRUE; 
01F4:  BSF    19.2
.................... 		setup_timer_0(T0_OFF); 
01F6:  CLRF   FD5
.................... 	} 
.................... } 
01F8:  GOTO   023C (RETURN)
....................  
.................... int main(void) { 
01FC:  CLRF   FF8
01FE:  BCF    FD0.7
0200:  BSF    07.7
0202:  CLRF   FEA
0204:  CLRF   FE9
0206:  BCF    19.0
0208:  BCF    19.1
020A:  BCF    19.2
020C:  CLRF   1A
020E:  CLRF   1C
0210:  CLRF   1B
0212:  BSF    FC1.0
0214:  BSF    FC1.1
0216:  BSF    FC1.2
0218:  BCF    FC1.3
....................  
.................... 	set_timer0(tmr0_reg); 
021A:  MOVLW  E9
021C:  MOVWF  FD7
021E:  MOVLW  6B
0220:  MOVWF  FD6
.................... 	setup_timer_0(T0_OFF); 
0222:  CLRF   FD5
.................... 	clear_interrupt(INT_TIMER0); 
0224:  BCF    FF2.2
.................... 	enable_interrupts(INT_TIMER0 | GLOBAL); 
0226:  MOVLW  E0
0228:  IORWF  FF2,F
....................  
.................... 	port_b_pullups(TRUE); 
022A:  BCF    FF1.7
....................  
.................... 	estado = estado_a; 
022C:  CLRF   1A
.................... 	output_low(canal_a); 
022E:  BCF    F94.7
0230:  BCF    F8B.7
.................... 	output_low(canal_b); 
0232:  BCF    F94.6
0234:  BCF    F8B.6
.................... 	output_high(canal_z); 
0236:  BCF    F94.5
0238:  BSF    F8B.5
....................  
.................... 	while (TRUE) { 
.................... 		check_bto(); 
023A:  BRA    019A
.................... 	} 
023C:  BRA    023A
....................  
.................... 	return 0; 
023E:  MOVLW  00
0240:  MOVWF  01
.................... } 
0242:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
